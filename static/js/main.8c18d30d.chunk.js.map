{"version":3,"sources":["firebase.js","ImageUpload.jsx","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","auth","ImageUpload","handleChange","event","image","target","files","setState","selectedFile","type","emailFirebase","state","email","split","database","ref","child","push","name","put","on","snapshot","photoName","val","newImages","key","getDownloadURL","then","url","singleImage","photoId","photoUrl","photosList","error","alert","code","deletePhoto","id","remove","amount","forEach","element","delete","user","onAuthStateChanged","className","tabIndex","onChange","this","accept","htmlFor","title","map","item","i","onClick","src","alt","Component","App","openDialog","document","getElementById","setAttribute","classList","closeDialog","removeAttribute","add","toggleTheme","themeRef","checked","body","style","background","userInput","value","handleSubmit","preventDefault","addNote","notesRef","deleteNote","login","e","password","signInWithEmailAndPassword","result","catch","errorMessage","message","signUp","createUserWithEmailAndPassword","logout","signOut","notesList","notes","newNotes","singleNote","noteId","noteText","theme","lavender","cork","open","rows","cols","noteValue","readOnly","placeholder","href","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8c18d30d.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAQAZ8FYOV6h7iPN4L_rp0SSE0Um1jp704\",\r\n  authDomain: \"fir-react-athentication.firebaseapp.com\",\r\n  databaseURL: \"https://fir-react-athentication.firebaseio.com\",\r\n  projectId: \"fir-react-athentication\",\r\n  storageBucket: \"fir-react-athentication.appspot.com\",\r\n  messagingSenderId: \"658384457017\",\r\n  appId: \"1:658384457017:web:4729276b456f8419956ce8\"\r\n};\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    \r\nconst storage = firebase.storage();\r\nconst auth = firebase.auth();\r\n\r\nexport{\r\n  auth, storage, firebase as default\r\n}","import React, {Component} from \"react\";\r\nimport firebase, {storage} from \"./firebase\";\r\n\r\nconst auth = firebase.auth();\r\n\r\nclass ImageUpload extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            photosList: [],\r\n            selectedFile:null,\r\n            user: null,\r\n            email: null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        auth.onAuthStateChanged((user) => {\r\n            const email = user.email\r\n    \r\n            if (user) {\r\n                this.setState({ user, email });\r\n                \r\n                //Retrieve file name of each photo from database and storage bucket\r\n\r\n                 //Firebase cannot have \".\" characters, must split and concat to remove\r\n                const emailFirebase = email.split(\".\")[0] + email.split(\".\")[1]\r\n\r\n                firebase.database().ref().child(emailFirebase).child(\"photos\").on(\"value\", (snapshot)=>{\r\n                    const photoName = snapshot.val();\r\n                    const newImages = [];\r\n\r\n                    for(let key in photoName){\r\n                        storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                            const singleImage = {\r\n                                photoId: key,\r\n                                photoName: photoName[key],\r\n                                photoUrl: url\r\n                            };\r\n\r\n                            newImages.push(singleImage)\r\n        //Update the state for photos\r\n                            this.setState({\r\n                                photosList: newImages\r\n                            });\r\n                        });\r\n                    }\r\n                });\r\n            };\r\n        });\r\n    }\r\n\r\n    handleChange =(event) =>{\r\n        \r\n        //This is the object file for the image uploaded\r\n        const image = event.target.files[0]\r\n\r\n        //Bind input changes\r\n        this.setState({\r\n            selectedFile: image\r\n        })\r\n\r\n        //only allow upload following file types for image files\r\n        if(image.type === \"image/jpeg\" || image.type === \"image/jpg\" || image.type === \"image/png\" || image.type === \"image/gif\"){\r\n\r\n            //Push the file name into the database\r\n            //Note: Ideally I would get the image url immediately after downloading image into storage bucket and push/store THIS in the database (instead of the file name), but this causes issues, must store file name into database and THEN download its url at a later time\r\n\r\n             //Firebase cannot have \".\" characters, must split and concat to remove\r\n            const emailFirebase = this.state.email.split(\".\")[0]+this.state.email.split(\".\")[1]\r\n            const photosRef = firebase.database().ref().child(emailFirebase).child(\"photos\")\r\n            photosRef.push(image.name);\r\n\r\n            //Upload image into storage bucket\r\n            const uploadImage = storage.ref(image.name).put(image)\r\n            uploadImage.on(\"state_changed\",\r\n            ()=>{   //update state after image is uploaded, so image displays immediately on screen\r\n                    //Must grab a snapshot from firebase of photos file names and download url for each in order to update state\r\n                    firebase.database().ref().child(emailFirebase).child(\"photos\").on(\"value\", (snapshot)=>{\r\n                        const photoName = snapshot.val();\r\n                        const newImages = [];\r\n            \r\n                        for(let key in photoName){\r\n                            storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                                const singleImage = {\r\n                                    photoId: key,\r\n                                    photoName: photoName[key],\r\n                                    photoUrl: url\r\n                                }\r\n                            \r\n                                newImages.push(singleImage);\r\n            \r\n                                this.setState({\r\n                                    photosList: newImages\r\n                                })\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                //Error handling\r\n                (error)=> {\r\n                    alert(`We could not upload your file at this time due to ${error.code}. Please try again later.`)\r\n                }\r\n            )\r\n        \r\n        }else{\r\n            alert(\"Sorry! The file format you uploaded could not be processed. Only JPG, JPEG, PNG and GIF files are allowed.\")\r\n        }\r\n    }\r\n\r\n    //Remove photo name from database and storage bucket\r\n    deletePhoto = (event) => {\r\n         //Firebase cannot have \".\" characters, must split and concat to remove\r\n        const emailFirebase = this.state.email.split(\".\")[0] + this.state.email.split(\".\")[1]\r\n        const photosRef = firebase.database().ref().child(emailFirebase).child(\"photos\");\r\n        photosRef.child(event.target.id).remove();\r\n\r\n        //remove from storage bucket only if there isn't two of the same image\r\n        let amount = 0\r\n        this.state.photosList.forEach(element => {\r\n            if(event.target.name === element.photoName){\r\n                amount += 1\r\n            }\r\n        })\r\n        //if amount of images in state is one or less, than there are no duplicates\r\n        if(amount < 2){\r\n            storage.ref().child(event.target.name).delete() \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"photos wrapper\" id=\"photos\">\r\n                {/* Default file upload button hidden */}\r\n                <input id=\"fileUpload\" type=\"file\" className=\"customUpload visuallyHidden\" tabIndex=\"1\" onChange={this.handleChange} accept=\"image/*\"/>\r\n                {/* Custom file upload button by styling label */}\r\n                <label htmlFor=\"fileUpload\" className=\"customUpload\" title=\"Upload photo\">\r\n                    <span className=\"visuallyHidden\">Click here to upload an image</span>▲ \r\n                </label>\r\n                {/* Map photosList array in state to see all photos uploaded by user */}\r\n                <ul className=\"gallery\">\r\n                    {this.state.photosList.map((item, i)=>{\r\n                        return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                                <button id={item.photoId} name={item.photoName} className=\"delete\" onClick={this.deletePhoto} title=\"Delete photo\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <img src={item.photoUrl} alt={item.photoName}/>\r\n                        </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\"\nimport ImageUpload from \"./ImageUpload\"\n\nconst auth = firebase.auth();\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state ={\n          user:null,\n          email:null,\n          notesList:[],\n          userInput: \"\"\n        }\n    }\n\n    componentDidMount(){\n    //check if user is logged in\n    auth.onAuthStateChanged((user) => {\n      const email = user.email\n\n      //Email without \".\" because firebase cannot process periods\n      const emailFirebase = email.split(\".\")[0] + email.split(\".\")[1]\n\n      if (user) {\n        this.setState({ user, email });\n\n        //connect to firebase\n        const notesRef = firebase.database().ref().child(emailFirebase).child(\"notes\")\n        notesRef.on(\"value\", (snapshot) =>{\n            const notes = snapshot.val();\n\n            const newNotes = [];\n\n            //for every object, we create a new object with two key values: note text and note id\n            for(let key in notes){\n\n              //Find out the key of each note value in firebase, to figure out how to delete each later\n              const singleNote = {\n                  noteId: key,\n                  noteText: notes[key]\n                }\n\n                newNotes.push(singleNote)\n            }\n\n            //Update state for notes - taking new array and updating it\n              this.setState({\n                  notesList:newNotes\n              })\n          })\n          //Retrieve theme last saved from firebase database to place on page\n          const themeRef = firebase.database().ref().child(emailFirebase).child(\"theme\")\n\n          themeRef.on(\"value\", (snapshot) =>{\n            const theme = snapshot.val()\n\n            let lavender = 0\n            let cork = 0\n            for (let key in theme){\n              if(theme[key] === \"lavender\"){\n                lavender += 1;\n              }else{\n                cork += 1;\n              }\n\n              if(lavender === cork){\n                document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n                document.getElementById(\"toggleTheme\").checked = false;\n              }else{\n                document.body.style.background = \"#8386de\"\n                document.getElementById(\"toggleTheme\").checked = true;\n              }\n            }\n          })\n        } \n      });\n    }\n    //Open dialog form for creating a new note when user clicks the plus sign\n    openDialog = () => {\n      document.getElementById(\"dialog\").setAttribute(\"open\", true)\n      document.getElementById(\"dialog\").classList.remove(\"visuallyHidden\")\n    }\n//Closing dialogs whenever user clicks the \"x\"\n    closeDialog = () => {\n      document.getElementById(\"dialog\").removeAttribute(\"open\")\n      document.getElementById(\"dialog\").classList.add(\"visuallyHidden\")\n      document.getElementById(\"welcome\").removeAttribute(\"open\")\n      document.getElementById(\"welcome\").classList.add(\"visuallyHidden\")\n    }\n//Switches between two themes available whenever user toggles switch\n//Pushes theme chosen to firebase to save preferred theme for later\n    toggleTheme = (event) =>{\n      //Firebase cannot have \".\" characters, must split and concat to remove\n      const emailFirebase = this.state.email.split(\".\")[0]+this.state.email.split(\".\")[1]\n      const themeRef = firebase.database().ref().child(emailFirebase).child(\"theme\")\n      if(event.target.checked === true){\n        document.body.style.background = \"#8386de\"\n        themeRef.push(\"lavender\")\n      }else{\n        document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n        themeRef.push(\"cork\")\n      }\n    }\n\n    //Update state everytime user types inside input text bar\n    handleChange = (event) =>{\n        this.setState({\n            userInput: event.target.value\n        })\n    }\n\n    //Submitting form for creating a new note\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //Put what we submit, the book title, in a constant\n        const addNote = this.state.userInput\n        //add 'booksToAdd' to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\n\n        //push to firebase\n\n        //Firebase cannot have \".\" characters, must split and concat to remove\n        const emailFirebase = this.state.email.split(\".\")[0] + this.state.email.split(\".\")[1]\n        const notesRef = firebase.database().ref().child(emailFirebase).child(\"notes\");\n\n        // Make sure no empty strings are submitted\n        if(addNote !== \"\"){\n            notesRef.push(addNote)\n            //Make user input an empty string, make sure to update HTML with value attribute\n            this.setState({\n                userInput: \"\"\n            })\n        }else{\n          alert(\"Sorry! Blank notes cannot be submitted.\")\n        }\n  \n    }\n//Delete written note by user\n    deleteNote = (event) => {\n      event.preventDefault();\n\n       //Firebase cannot have \".\" characters, must split and concat to remove\n      const emailFirebase = this.state.email.split(\".\")[0]+this.state.email.split(\".\")[1]\n\n      const notesRef = firebase.database().ref().child(emailFirebase).child(\"notes\");\n\n      notesRef.child(event.target.id).remove();\n    }\n//Authentication\n//Login button\n    login = (e) => {\n      e.preventDefault();\n      const email = document.getElementById(\"textEmail\").value\n      const password = document.getElementById(\"textPassword\").value\n  \n      auth.signInWithEmailAndPassword(email, password).then((result) => {\n        const user = result.user;\n        const email = result.user.email\n        this.setState({\n          user,\n          email\n        })\n      }).catch(function(error) {\n        // Handle Errors here.\n        var errorMessage = error.message;\n        alert(errorMessage + ` Try logging in again later or create a new account.`)\n      });\n    }\n  //Sign up button\n    signUp = (e) => {\n      e.preventDefault();\n      //Check for real email\n      const email = document.getElementById(\"textEmail\").value\n      const password = document.getElementById(\"textPassword\").value\n      auth.createUserWithEmailAndPassword(email, password).catch(function(error) {\n        // Handle Errors here.\n        var errorMessage = error.message;\n        alert(errorMessage + ` Try again later.`)\n      });\n    }\n  //Log out button\n    logout  = () => {\n      auth.signOut()\n        .then(() => {\n          this.setState({\n            user: null\n          });\n        });\n    }\n//Render on page\n    render(){\n        return(\n          <div>\n          {this.state.user ?\n            <main>\n              {/* Logout button */}\n              <button onClick={this.logout} className=\"logoutBtn\" title=\"Log out\">\n                <span className=\"visuallyHidden\">Click here to log out</span>\n                ◑\n              </button>\n              {/* Toggle switch for two themes */}\n              <label className=\"switch\" title=\"Change theme\">\n              <span className=\"visuallyHidden\">Click here to change the theme</span>\n                <input type=\"checkbox\" onChange={this.toggleTheme} id=\"toggleTheme\" tabIndex=\"0\" className=\"visuallyHidden\"/>\n                <span className=\"slider\"></span>\n              </label>\n              {/* Welcome message and instructions dialog */}\n              <dialog id=\"welcome\" className=\"welcome\" open>\n                <div className=\"titleBar\">\n                  <button id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                </div>\n                <h1>Welcome to QuickNotes!</h1>\n                <p>QuickNotes is an application that allows you to save all your notes and photos in one convenient place.</p>\n                <p>Choose a button in the right panel to get started:</p>\n                <ul>\n                  <li>- Toggle the switch to change themes</li>\n                  <li>- Click the triangle (▲) to upload a photo</li>\n                  <li>- Click the plus sign (+) to create a new note</li>\n                  <li>- Click the half-filled circle (◑) to log out</li>\n                  <li>- Click the \"x\" to delete an item and close the window</li>\n                </ul>\n              </dialog>\n              {/* Section for displaying notes */}\n              <section className=\"notes wrapper\" id=\"notes\">\n                {/* Button to open dialog to create a new note */}\n                <button type=\"open\" onClick={this.openDialog} title=\"New note\">\n                  <span className=\"visuallyHidden\">Click here to write a new note</span>+\n                </button>\n                {/* Dialog for form for writing and submitting a new note */}\n                <dialog id=\"dialog\" className=\"newNote visuallyHidden\">\n                  <form>\n                    <div className=\"titleBar\">\n                      <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\n                      <button type=\"submit\" title=\"Submit note\" onClick={this.handleSubmit}>Add Note +</button>\n                    </div>\n                    <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\n                  </form>\n                </dialog>\n                {/* Section to map array of notesList in state to display notes written by user */}\n                <ul>\n                    {this.state.notesList.map((noteValue, i)=>{\n                        return(\n                            <li key={i}>\n                              <div className=\"titleBar\">\n                                <button id={noteValue.noteId} className=\"delete\" onClick={this.deleteNote} title=\"Delete note\" tabIndex=\"0\">X</button>\n                              </div>\n                              <textarea rows=\"7\" cols=\"16\" value={noteValue.noteText} readOnly></textarea>\n                            </li>\n                        )\n                    })}\n                </ul>\n              </section>\n              <ImageUpload/>\n            </main>\n            :\n            <form className=\"homePage\">\n                <div className=\"wrapper\">\n                <h1>Welcome to QuickNotes!</h1>\n                <p>Log in or create an account if you don't have one already. To create an account, enter an email and password before clicking sign up.</p>\n                <label htmlFor=\"textEmail\" className=\"visuallyHidden\">Enter your email:</label>\n                <input id=\"textEmail\" type=\"email\" placeholder=\"Email\"></input>\n                <label htmlFor=\"textPassword\" className=\"visuallyHidden\">Enter your password:</label>\n                <input id=\"textPassword\" type=\"password\" placeholder=\"Password\"></input>\n                <div className=\"buttons\">\n                  <button onClick={this.login} id=\"loginBtn\">Log In</button>\n                  <button onClick={this.signUp} id=\"signUpBtn\">Sign Up</button>\n                </div>\n                <p className=\"aside\">Click <a href=\"https://alissacheng.github.io/alissaChengQuickNotes/\">here</a> to test out the app without making an account or click <a href=\"https://github.com/alissacheng/alissaChengQuickNotes\">here</a> to see the test version on GitHub.</p>\n              </div>\n            </form>\n          }\n          </div>\n        )\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}