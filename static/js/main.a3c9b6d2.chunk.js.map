{"version":3,"sources":["firebase.js","Welcome.js","TypeNotes.js","ImageUpload.jsx","Login.js","ButtonPanel.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","storage","Welcome","auth","closeWelcome","document","getElementById","removeAttribute","classList","add","emailProp","props","database","ref","child","push","this","on","snapshot","welcome","val","key","id","className","open","onClick","title","Component","TypeNotes","closeDialog","setState","userInput","noteId","handleChange","event","target","value","handleSubmit","preventDefault","addNote","state","notesRef","alert","editNote","setAttribute","remove","saveNote","set","cloneNotesList","notesList","forEach","item","noteText","deleteNote","notes","newNotes","singleNote","type","rows","cols","onChange","map","noteValue","i","role","aria-label","aria-hidden","tabIndex","readOnly","ImageUpload","image","files","selectedFile","name","put","photoName","newImages","getDownloadURL","then","url","singleImage","photoId","photoUrl","photosList","error","code","deletePhoto","amount","element","delete","accept","htmlFor","src","alt","Login","login","e","email","password","signInWithEmailAndPassword","result","user","setUserProp","catch","errorMessage","message","signUp","createUserWithEmailAndPassword","placeholder","href","ButtonPanel","toggleThemeProp","openDialogProp","logoutProp","App","openDialog","toggleTheme","themeRef","emailFirebase","checked","body","style","background","setUser","logout","signOut","onAuthStateChanged","split","theme","lavender","cork","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3c9b6d2.chunk.js","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/database'\r\nimport 'firebase/storage'\r\nimport 'firebase/auth'\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAQAZ8FYOV6h7iPN4L_rp0SSE0Um1jp704\",\r\n  authDomain: \"fir-react-athentication.firebaseapp.com\",\r\n  databaseURL: \"https://fir-react-athentication.firebaseio.com\",\r\n  projectId: \"fir-react-athentication\",\r\n  storageBucket: \"fir-react-athentication.appspot.com\",\r\n  messagingSenderId: \"658384457017\",\r\n  appId: \"1:658384457017:web:4729276b456f8419956ce8\"\r\n};\r\n  // Initialize Firebase\r\n    firebase.initializeApp(firebaseConfig);\r\n    \r\nconst storage = firebase.storage();\r\nconst auth = firebase.auth();\r\n\r\nexport{\r\n  auth, storage, firebase as default\r\n}","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport firebase from \"./firebase.js\"\r\n\r\nclass Welcome extends Component{\r\n\r\n    componentDidMount(){\r\n        const {emailProp} = this.props\r\n        if(emailProp){\r\n                     //Check if welcome dialog has already been closed before, and keep it closed if so\r\n            const welcomeRef = firebase.database().ref().child(emailProp).child(\"welcome\")\r\n\r\n            welcomeRef.on(\"value\", (snapshot)=>{\r\n            const welcome = snapshot.val()\r\n\r\n            for(let key in welcome){\r\n                if(welcome[key] === \"closed\"){\r\n                    document.getElementById(\"welcome\").removeAttribute(\"open\")\r\n                    document.getElementById(\"welcome\").classList.add(\"visuallyHidden\")\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //Close welcome dialog \r\n    closeWelcome = () => {\r\n        document.getElementById(\"welcome\").removeAttribute(\"open\")\r\n        document.getElementById(\"welcome\").classList.add(\"visuallyHidden\")\r\n  //Make sure welcome dialog doesn't re-open next time session\r\n        const {emailProp} = this.props\r\n        const welcomeRef = firebase.database().ref().child(emailProp).child(\"welcome\")\r\n        welcomeRef.push(\"closed\")\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <dialog id=\"welcome\" className=\"welcome\" open>\r\n            <div className=\"titleBar\">\r\n                <button id=\"closeBtn\" onClick={this.closeWelcome} title=\"Close window\">X</button>\r\n            </div>\r\n            <h1>Welcome to QuickNotes!</h1>\r\n            <p>QuickNotes is an application that allows you to save all your notes and photos in one convenient place.</p>\r\n            <p>Choose a button in the right panel to get started:</p>\r\n            <ul>\r\n                <li>- Toggle the switch to change themes</li>\r\n                <li>- Click the triangle (▲) to upload a photo</li>\r\n                <li>- Click the plus sign (+) to create a new note</li>\r\n                <li>- Click the half-filled circle (◑) to log out</li>\r\n                <li>- Click the \"x\" to delete an item and close the window</li>\r\n            </ul>\r\n        </dialog>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Welcome","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport firebase from \"./firebase.js\"\r\n\r\nclass TypeNotes extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            notesList:[],\r\n            userInput: \"\",\r\n            noteId: null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {emailProp} = this.props\r\n\r\n        //Retrieve notes by connecting to firebase if logged in \r\n        if (emailProp) {\r\n        const notesRef = firebase.database().ref().child(emailProp).child(\"notes\")\r\n            notesRef.on(\"value\", (snapshot) =>{\r\n                \r\n                const notes = snapshot.val();\r\n                const newNotes = [];\r\n\r\n                //for every object, we create a new object with two key values: note text and note id\r\n                for(let key in notes){\r\n\r\n                //Find out the key of each note value in firebase, to figure out how to delete each later\r\n                    const singleNote = {\r\n                        noteId: key,\r\n                        noteText: notes[key]\r\n                    }\r\n\r\n                    newNotes.push(singleNote)\r\n                }\r\n\r\n                //Update state for notes - taking new array and updating it\r\n                this.setState({\r\n                    notesList:newNotes\r\n                })\r\n            })\r\n        } \r\n    }\r\n\r\n//Closing dialogs whenever user clicks the \"x\"\r\n    closeDialog = () => {\r\n        document.getElementById(\"dialog\").removeAttribute(\"open\")\r\n        document.getElementById(\"dialog\").classList.add(\"visuallyHidden\")\r\n        document.getElementById(\"edit\").removeAttribute(\"open\")\r\n        document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\r\n//Clear user input and user id once dialog closes\r\n        this.setState({\r\n            userInput: \"\",\r\n            noteId:null\r\n        })\r\n    }\r\n\r\n    //Update state everytime user types inside input text bar\r\n    handleChange = (event) =>{\r\n        this.setState({\r\n            userInput: event.target.value\r\n        })\r\n    }\r\n\r\n    //Submitting form for creating a new note\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //Put what we submit in a constant, then push to firebase to update state and re-render app\r\n        const addNote = this.state.userInput\r\n\r\n        const {emailProp} = this.props\r\n        const notesRef = firebase.database().ref().child(emailProp).child(\"notes\");\r\n\r\n        // Make sure no empty strings are submitted\r\n        if(addNote !== \"\"){\r\n            notesRef.push(addNote)\r\n            //Make user input an empty string, make sure to update HTML with value attribute\r\n            this.setState({\r\n                userInput: \"\"\r\n            })\r\n        }else{\r\n            alert(\"Sorry! Blank notes cannot be submitted.\")\r\n        }\r\n    }\r\n\r\n    //Edit note written by user\r\n    editNote = (event) => {\r\n        event.preventDefault();\r\n\r\n        document.getElementById(\"edit\").setAttribute(\"open\", true)\r\n        document.getElementById(\"edit\").classList.remove(\"visuallyHidden\")\r\n//Bind inputs\r\n        this.setState({\r\n            userInput: event.target.value,\r\n            noteId: event.target.id\r\n        })\r\n\r\n    }\r\n//Save note editted\r\n    saveNote = (event) =>{\r\n        event.preventDefault();\r\n\r\n        const addNote = this.state.userInput\r\n        //add to firebase (so that the dbRef listener will be called and it willl update state and cause the app to re-render)\r\n\r\n        // Make sure no empty strings are submitted\r\n        if(addNote !== \"\"){\r\n          //Make user input an empty string, make sure to update HTML with value attribute\r\n            this.setState({\r\n                userInput: \"\"\r\n            })\r\n          //Close dialog after saving new note\r\n            document.getElementById(\"edit\").removeAttribute(\"open\")\r\n            document.getElementById(\"edit\").classList.add(\"visuallyHidden\")\r\n\r\n            const {emailProp} = this.props\r\n\r\n//update firebase, then update state by cloning notesList array and changing it\r\n            firebase.database().ref(emailProp + \"/notes/\" + this.state.noteId).set(addNote);\r\n        //Clone notes list array to edit it because cannot edit original array in state directly\r\n            const cloneNotesList = [...this.state.notesList]\r\n          //Find id of notes list being edited and change it to new value\r\n            cloneNotesList.forEach( item => {\r\n            if (item.noteId === this.state.noteId){\r\n                item.noteText = addNote\r\n        //set state of newly changed array of notes list and set noteId back to null to bind inputs\r\n                this.setState({\r\n                    notesList: cloneNotesList,\r\n                    noteId: null\r\n                })\r\n            }\r\n        })\r\n          //Error handling blank notes\r\n        }else{\r\n            alert(\"Sorry! Blank notes cannot be submitted.\")\r\n        }\r\n\r\n    }\r\n\r\n//Delete written note by user\r\n    deleteNote = (event) => {\r\n        event.preventDefault();\r\n\r\n        const {emailProp} = this.props\r\n        const notesRef = firebase.database().ref().child(emailProp).child(\"notes\");\r\n\r\n        notesRef.child(event.target.id).remove();\r\n    }\r\n//Render on page\r\n    render(){\r\n        return(\r\n            <section className=\"notes wrapper\" id=\"notes\">\r\n            {/* Dialog for form for writing and submitting a new note */}\r\n            <dialog id=\"dialog\" className=\"newNote visuallyHidden\">\r\n                <form>\r\n                <div className=\"titleBar\">\r\n                    <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\r\n                    <button type=\"submit\" title=\"Submit note\" onClick={this.handleSubmit}>Add Note +</button>\r\n                </div>\r\n                <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\r\n                </form>\r\n            </dialog>\r\n            {/* Dialog for form for editing and saving a new note */}\r\n            <dialog id=\"edit\" className=\"newNote visuallyHidden\">\r\n                <form>\r\n                <div className=\"titleBar\">\r\n                    <button type=\"button\" id=\"closeBtn\" onClick={this.closeDialog} title=\"Close window\">X</button>\r\n                    <button type=\"submit\" title=\"Save note\" onClick={this.saveNote}>Save Note +</button>\r\n                </div>\r\n                <textarea type=\"text\" id=\"noteText\" rows=\"7\" cols=\"16\" onChange={this.handleChange} value={this.state.userInput}></textarea>\r\n                </form>\r\n            </dialog>\r\n            {/* Section to map array of notesList in state to display notes written by user */}\r\n            <ul className=\"notes\">\r\n                {this.state.notesList.map((noteValue, i)=>{\r\n                    return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                            <button id={noteValue.noteId} value={noteValue.noteText} className=\"edit\" title=\"Edit note\" onClick={this.editNote}>\r\n                                <span role=\"img\" aria-label=\"notepad\" aria-hidden=\"true\">📝</span> \r\n                                Edit\r\n                            </button>\r\n                            <button id={noteValue.noteId} className=\"delete\" onClick={this.deleteNote} title=\"Delete note\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <textarea rows=\"7\" cols=\"16\" value={noteValue.noteText} readOnly></textarea>\r\n                        </li>\r\n                    )\r\n                })}\r\n            </ul>\r\n        </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TypeNotes;","import React, {Component} from \"react\";\r\nimport firebase, {storage} from \"./firebase\";\r\n\r\nclass ImageUpload extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            photosList: [],\r\n            selectedFile:null\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {emailProp} = this.props\r\n        if (emailProp) {\r\n    \r\n            //Retrieve file name of each photo from database and storage bucket\r\n            firebase.database().ref().child(emailProp).child(\"photos\").on(\"value\", (snapshot)=>{\r\n                const photoName = snapshot.val();\r\n                const newImages = [];\r\n\r\n                for(let key in photoName){\r\n                    storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                        const singleImage = {\r\n                            photoId: key,\r\n                            photoName: photoName[key],\r\n                            photoUrl: url\r\n                        };\r\n\r\n                        newImages.push(singleImage)\r\n    //Update the state for photos\r\n                        this.setState({\r\n                            photosList: newImages\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    handleChange =(event) =>{\r\n        \r\n        //This is the object file for the image uploaded\r\n        const image = event.target.files[0]\r\n\r\n        //Bind input changes\r\n        this.setState({\r\n            selectedFile: image\r\n        })\r\n\r\n        //only allow upload following file types for image files\r\n        if(image.type === \"image/jpeg\" || image.type === \"image/jpg\" || image.type === \"image/png\" || image.type === \"image/gif\"){\r\n\r\n            //Push the file name into the database\r\n            //Note: Ideally I would get the image url immediately after downloading image into storage bucket and push/store THIS in the database (instead of the file name), but this causes issues, must store file name into database and THEN download its url at a later time\r\n\r\n            const {emailProp} = this.props\r\n            const photosRef = firebase.database().ref().child(emailProp).child(\"photos\")\r\n            photosRef.push(image.name);\r\n\r\n            //Upload image into storage bucket\r\n            const uploadImage = storage.ref(image.name).put(image)\r\n            uploadImage.on(\"state_changed\",\r\n            ()=>{   //update state after image is uploaded, so image displays immediately on screen\r\n                    //Must grab a snapshot from firebase of photos file names and download url for each in order to update state\r\n                    firebase.database().ref().child(emailProp).child(\"photos\").on(\"value\", (snapshot)=>{\r\n                        const photoName = snapshot.val();\r\n                        const newImages = [];\r\n            \r\n                        for(let key in photoName){\r\n                            storage.ref().child(photoName[key]).getDownloadURL().then(url=>{\r\n                                const singleImage = {\r\n                                    photoId: key,\r\n                                    photoName: photoName[key],\r\n                                    photoUrl: url\r\n                                }\r\n                            \r\n                                newImages.push(singleImage);\r\n            \r\n                                this.setState({\r\n                                    photosList: newImages\r\n                                })\r\n                            })\r\n                        }\r\n                    })\r\n                },\r\n                //Error handling\r\n                (error)=> {\r\n                    alert(`We could not upload your file at this time due to ${error.code}. Please try again later.`)\r\n                }\r\n            )\r\n        \r\n        }else{\r\n            alert(\"Sorry! The file format you uploaded could not be processed. Only JPG, JPEG, PNG and GIF files are allowed.\")\r\n        }\r\n    }\r\n\r\n    //Remove photo name from database and storage bucket\r\n    deletePhoto = (event) => {\r\n        const {emailProp} = this.props\r\n        const photosRef = firebase.database().ref().child(emailProp).child(\"photos\");\r\n        photosRef.child(event.target.id).remove();\r\n\r\n        //remove from storage bucket only if there isn't two of the same image\r\n        let amount = 0\r\n        this.state.photosList.forEach(element => {\r\n            if(event.target.name === element.photoName){\r\n                amount += 1\r\n            }\r\n        })\r\n        //if amount of images in state is one or less, than there are no duplicates\r\n        if(amount < 2){\r\n            storage.ref().child(event.target.name).delete() \r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <section className=\"photos wrapper\" id=\"photos\">\r\n                {/* Default file upload button hidden */}\r\n                <input id=\"fileUpload\" type=\"file\" className=\"customUpload visuallyHidden\" tabIndex=\"1\" onChange={this.handleChange} accept=\"image/*\"/>\r\n                {/* Custom file upload button by styling label */}\r\n                <label htmlFor=\"fileUpload\" className=\"customUpload\" title=\"Upload photo\">\r\n                    <span className=\"visuallyHidden\">Click here to upload an image</span>▲ \r\n                </label>\r\n                {/* Map photosList array in state to see all photos uploaded by user */}\r\n                <ul className=\"gallery\">\r\n                    {this.state.photosList.map((item, i)=>{\r\n                        return(\r\n                        <li key={i}>\r\n                            <div className=\"titleBar\">\r\n                                <button id={item.photoId} name={item.photoName} className=\"delete\" onClick={this.deletePhoto} title=\"Delete photo\" tabIndex=\"0\">X</button>\r\n                            </div>\r\n                            <img src={item.photoUrl} alt={item.photoName}/>\r\n                        </li>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ImageUpload","import React, {Component} from \"react\";\r\nimport firebase from \"./firebase.js\"\r\nconst auth = firebase.auth();\r\n\r\nclass Login extends Component {\r\n//Login button\r\n    login = (e) => {\r\n        e.preventDefault();\r\n        const email = document.getElementById(\"textEmail\").value\r\n        const password = document.getElementById(\"textPassword\").value\r\n\r\n        auth.signInWithEmailAndPassword(email, password).then((result) => {\r\n        const user = result.user;\r\n        const email = result.user.email\r\n\r\n        this.props.setUserProp(user, email)\r\n\r\n        }).catch(function(error) {\r\n        // Handle Errors here.\r\n        var errorMessage = error.message;\r\n        alert(errorMessage)\r\n        });\r\n    }\r\n    //Sign up button\r\n    signUp = (e) => {\r\n        e.preventDefault();\r\n        //Check for real email\r\n        const email = document.getElementById(\"textEmail\").value\r\n        const password = document.getElementById(\"textPassword\").value\r\n        auth.createUserWithEmailAndPassword(email, password).catch(function(error) {\r\n        // Handle Errors here.\r\n        var errorMessage = error.message;\r\n        alert(errorMessage)\r\n        });\r\n    }\r\n    render() {\r\n        return(\r\n        <form className=\"homePage\">\r\n            <div className=\"wrapper\">\r\n                <h1>Welcome to QuickNotes!</h1>\r\n                <p>Log in or create an account if you don't have one already. To create an account, enter an email and password before clicking sign up.</p>\r\n                <label htmlFor=\"textEmail\" className=\"visuallyHidden\">Enter your email:</label>\r\n                <input id=\"textEmail\" type=\"email\" placeholder=\"Email\"></input>\r\n                <label htmlFor=\"textPassword\" className=\"visuallyHidden\">Enter your password:</label>\r\n                <input id=\"textPassword\" type=\"password\" placeholder=\"Password\"></input>\r\n                <div className=\"buttons\">\r\n                    <button onClick={this.login} id=\"loginBtn\">Log In</button>\r\n                    <button onClick={this.signUp} id=\"signUpBtn\">Sign Up</button>\r\n                </div>\r\n                <p className=\"aside\">Click <a href=\"https://alissacheng.github.io/alissaChengQuickNotes/\">here</a> to test out the app without making an account or click <a href=\"https://github.com/alissacheng/alissaChengQuickNotes\">here</a> to see the test version on GitHub.</p>\r\n            </div>\r\n        </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nconst ButtonPanel = (props) => {\r\n    return(\r\n        <div>\r\n            {/* Switch to toggle background color / theme */}\r\n            <label className=\"switch\" title=\"Change theme\">\r\n            <span className=\"visuallyHidden\">Click here to change the theme</span>\r\n                <input type=\"checkbox\" onChange={props.toggleThemeProp} id=\"toggleTheme\" className=\"visuallyHidden\"/>\r\n                <span className=\"slider\"></span>\r\n            </label>\r\n            {/* Button to open dialog to create a new note */}\r\n            <button type=\"open\" onClick={props.openDialogProp} title=\"New note\">\r\n                <span className=\"visuallyHidden\">Click here to write a new note</span>+\r\n            </button>\r\n            {/* Logout Button */}\r\n            <button onClick={props.logoutProp} className=\"logoutBtn\" title=\"Log out\">\r\n                <span className=\"visuallyHidden\">Click here to log out</span>\r\n                ◑\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonPanel","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport firebase from \"./firebase.js\"\nimport Welcome from \"./Welcome\"\nimport TypeNotes from \"./TypeNotes\"\nimport ImageUpload from \"./ImageUpload\"\nimport Login from \"./Login\"\nimport ButtonPanel from \"./ButtonPanel\"\n\nconst auth = firebase.auth();\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state ={\n          user:null,\n          email:null,\n          emailFirebase:null\n        }\n    }\n\n    componentDidMount(){\n    //check if user is logged in\n    auth.onAuthStateChanged((user) => {\n      const email = user.email\n\n      //Email without \".\" because firebase cannot process periods\n      const emailFirebase = email.split(\".\")[0] + email.split(\".\")[1]\n\n      if (user) {\n        this.setState({ user, email, emailFirebase });\n\n          //Retrieve theme last saved from firebase database to place on page\n          const themeRef = firebase.database().ref().child(emailFirebase).child(\"theme\")\n\n          themeRef.on(\"value\", (snapshot) =>{\n            const theme = snapshot.val()\n\n            let lavender = 0\n            let cork = 0\n            for (let key in theme){\n              if(theme[key] === \"lavender\"){\n                lavender += 1;\n              }else{\n                cork += 1;\n              }\n\n              if(lavender === cork){\n                document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n                document.getElementById(\"toggleTheme\").checked = false;\n              }else{\n                document.body.style.background = \"#8386de\"\n                document.getElementById(\"toggleTheme\").checked = true;\n              }\n            }\n          })\n        } \n      });\n    }\n    //Open dialog form for creating a new note when user clicks the plus sign\n    openDialog = () => {\n      document.getElementById(\"dialog\").setAttribute(\"open\", true)\n      document.getElementById(\"dialog\").classList.remove(\"visuallyHidden\")\n    }\n\n//Switches between two themes available whenever user toggles switch\n//Pushes theme chosen to firebase to save preferred theme for later\n    toggleTheme = (event) =>{\n      //Firebase cannot have \".\" characters, must split and concat to remove\n      const themeRef = firebase.database().ref().child(this.state.emailFirebase).child(\"theme\")\n      if(event.target.checked === true){\n        document.body.style.background = \"#8386de\"\n        themeRef.push(\"lavender\")\n      }else{\n        document.body.style.background = \"url(./assets/corkBoard.jpg)\"\n        themeRef.push(\"cork\")\n      }\n    }\n\n//Set state of user and email after logging in\n    setUser = (user, email) =>{\n      this.setState({\n        user,\n        email\n      })\n    }\n  //Log out button\n    logout  = () => {\n      auth.signOut()\n        .then(() => {\n          this.setState({\n            user: null,\n            email: null\n          });\n        });\n    }\n//Render on page\n    render(){\n        return(\n          <div>\n          {this.state.user ?\n            <main>\n              <ButtonPanel\n                logoutProp={this.logout}\n                toggleThemeProp={this.toggleTheme}\n                openDialogProp={this.openDialog}\n              />\n              <Welcome\n                emailProp={this.state.emailFirebase}\n              />\n              <TypeNotes\n                emailProp={this.state.emailFirebase}\n              />\n              <ImageUpload\n                emailProp={this.state.emailFirebase}\n              />\n            </main>\n            :\n            <Login \n              setUserProp={this.setUser}\n            />\n          }\n          </div>\n        )\n    }\n  }\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}